const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const { ROLE } = require('../../utils/enums');
const Role = require('../../models/role.model');
const Permission = require('../../models/permission.model');
const RolePermission = require('../../models/role_permission.model');
const User = require('../../models/user.model');
const UserRole = require('../../models/user_role.model');
require('dotenv').config();

// Danh s√°ch permissions
const permissions = [
  // ‚úÖ QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG (AUTHENTICATION)
  { permissionName: "Manage Users" }, // Qu·∫£n l√Ω ng∆∞·ªùi d√πng (Admin)
  { permissionName: "Reset Passwords" }, // Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
  { permissionName: "Update Profile" }, // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n

  // ‚úÖ QU·∫¢N L√ù D·ª∞ √ÅN (PROJECT MANAGEMENT)
  { permissionName: "Create Project" }, // T·∫°o d·ª± √°n m·ªõi (Manager/Admin)
  { permissionName: "Edit Project" }, // Ch·ªânh s·ª≠a th√¥ng tin d·ª± √°n
  { permissionName: "Delete Project" }, // X√≥a d·ª± √°n (Admin)
  { permissionName: "Manage Project Members" }, // Qu·∫£n l√Ω th√†nh vi√™n d·ª± √°n

  // ‚úÖ QU·∫¢N L√ù C√îNG VI·ªÜC (TASK MANAGEMENT)
  { permissionName: "Create Personal Task" }, // T·∫°o task c√° nh√¢n (User)
  { permissionName: "Create Project Task" }, // T·∫°o task trong d·ª± √°n (Manager/Admin)
  { permissionName: "Assign Task" }, // Giao task cho th√†nh vi√™n
  { permissionName: "Edit Task" }, // Ch·ªânh s·ª≠a task
  { permissionName: "Delete Task" }, // X√≥a task (Admin/Manager)
  { permissionName: "Change Task Status" }, // C·∫≠p nh·∫≠t tr·∫°ng th√°i task

  // ‚úÖ QU·∫¢N L√ù B√ÅO C√ÅO & TH·ªêNG K√ä
  { permissionName: "View Reports" }, // Xem b√°o c√°o c√¥ng vi·ªác (Manager/Admin)
  { permissionName: "Generate Reports" }, // T·∫°o b√°o c√°o (Admin)

  // ‚úÖ QU·∫¢N L√ù H·ªÜ TH·ªêNG
  { permissionName: "Manage System Settings" }, // C·∫•u h√¨nh h·ªá th·ªëng (Admin)

  // ‚úÖ QU·∫¢N L√ù 2FA
  { permissionName: "Manage 2FA" },
];

// Mapping quy·ªÅn cho t·ª´ng role
const rolePermissionsMap = {
  Admin: [
    "Manage Users",
    "Reset Passwords",
    "Update Profile",
    "Create Project",
    "Edit Project",
    "Delete Project",
    "Manage Project Members",
    "Create Personal Task",
    "Create Project Task",
    "Assign Task",
    "Edit Task",
    "Delete Task",
    "Change Task Status",
    "View Reports",
    "Generate Reports",
    "Manage System Settings",
    "Manage 2FA",
  ],
  User: ["Update Profile", "Create Personal Task", "Change Task Status"],
};

/**
 * Kh·ªüi t·∫°o Roles n·∫øu ch∆∞a c√≥
 */
const seedRoles = async () => {
  try {
    const existingRoles = await Role.find({}, "roleName");
    const existingRoleNames = existingRoles.map((r) => r.roleName);

    const rolesToInsert = Object.values(ROLE).filter(
      (role) => !existingRoleNames.includes(role)
    );

    if (rolesToInsert.length > 0) {
      await Role.insertMany(rolesToInsert.map((roleName) => ({ roleName })));
      console.log("‚úÖ ƒê√£ t·∫°o c√°c roles c√≤n thi·∫øu:", rolesToInsert);
    } else {
      console.log("‚úÖ T·∫•t c·∫£ roles ƒë√£ t·ªìn t·∫°i.");
    }
    
    return await Role.find();
  } catch (error) {
    console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Roles:", error);
    throw error;
  }
};

// H√†m g√°n permissions cho role
const assignPermissionsToRole = async (roleName, permissionNames) => {
  const role = await Role.findOne({ roleName });
  if (!role) {
    console.error(`‚ùå Kh√¥ng t√¨m th·∫•y role: ${roleName}`);
    return;
  }

  const permissionObjects = await Permission.find({
    permissionName: { $in: permissionNames },
  });

  // Ki·ªÉm tra c√°c quy·ªÅn ƒë√£ ƒë∆∞·ª£c g√°n cho role ch∆∞a
  const existingRolePermissions = await RolePermission.find({ roleId: role._id });
  const existingPermissionIds = existingRolePermissions.map(rp => rp.permissionId.toString());

  // L·ªçc ra c√°c quy·ªÅn ch∆∞a ƒë∆∞·ª£c g√°n
  const newPermissions = permissionObjects.filter(permission => 
    !existingPermissionIds.includes(permission._id.toString())
  );

  if (newPermissions.length === 0) {
    console.log(`‚úÖ T·∫•t c·∫£ quy·ªÅn ƒë√£ ƒë∆∞·ª£c g√°n cho role ${roleName}`);
    return;
  }

  const rolePermissions = newPermissions.map((permission) => ({
    roleId: role._id,
    permissionId: permission._id,
  }));

  await RolePermission.insertMany(rolePermissions);
  console.log(`‚úÖ ƒê√£ g√°n ${newPermissions.length} quy·ªÅn m·ªõi cho role ${roleName}`);
};

/**
 * Kh·ªüi t·∫°o permissions v√† g√°n cho roles
 */
const seedPermissions = async () => {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ permissions ch∆∞a
    const existingPermissions = await Permission.find();
    
    if (existingPermissions.length === 0) {
      // T·∫°o permissions
      await Permission.insertMany(permissions);
      console.log("‚úÖ ƒê√£ t·∫°o permissions th√†nh c√¥ng!");
    } else {
      // Th√™m permissions m·ªõi n·∫øu c√≥
      const existingPermissionNames = existingPermissions.map(p => p.permissionName);
      const newPermissions = permissions.filter(p => !existingPermissionNames.includes(p.permissionName));
      
      if (newPermissions.length > 0) {
        await Permission.insertMany(newPermissions);
        console.log(`‚úÖ ƒê√£ th√™m ${newPermissions.length} permissions m·ªõi!`);
      } else {
        console.log("‚úÖ T·∫•t c·∫£ permissions ƒë√£ t·ªìn t·∫°i.");
      }
    }

    // G√°n permissions cho t·ª´ng role
    for (const [roleName, permissionNames] of Object.entries(rolePermissionsMap)) {
      await assignPermissionsToRole(roleName, permissionNames);
    }
    
    return {
      permissions: await Permission.find(),
      rolePermissions: await RolePermission.find()
    };
  } catch (error) {
    console.error("‚ùå L·ªói khi kh·ªüi t·∫°o permissions:", error);
    throw error;
  }
};

/**
 * Kh·ªüi t·∫°o t√†i kho·∫£n admin
 */
const seedAdmin = async () => {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@example.com';
    const adminPassword = process.env.ADMIN_PASSWORD || 'Admin@123';
    const adminPhone = process.env.ADMIN_PHONE || '0123456789';
    
    const adminExists = await User.findOne({ email: adminEmail });
    
    if (adminExists) {
      console.log("‚úÖ T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i.");
      return adminExists;
    }

    // T·∫°o admin user
    const hashedPassword = await bcrypt.hash(adminPassword, 10);
    const adminUser = await User.create({
      fullName: "System Admin",
      email: adminEmail,
      phone: adminPhone,
      password: hashedPassword,
      isVerified: true,
      isBlocked: false,
    });

    // G√°n role ADMIN
    const adminRole = await Role.findOne({ roleName: ROLE.ADMIN });
    if (adminRole) {
      await UserRole.create({
        userId: adminUser._id,
        roleId: adminRole._id,
      });
      console.log("‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin v√† g√°n quy·ªÅn th√†nh c√¥ng.");
    } else {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y role ADMIN trong database.");
    }
    
    return adminUser;
  } catch (error) {
    console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Admin:", error);
    throw error;
  }
};

/**
 * Run all initial seeds
 */
const runInitialSeeds = async () => {
  try {
    console.log('‚è≥ ƒêang ch·∫°y initial seeds...');
    
    // Ch·∫°y theo th·ª© t·ª±: roles -> permissions -> admin
    await seedRoles();
    await seedPermissions();
    await seedAdmin();

    console.log('‚úÖ ƒê√£ ho√†n th√†nh initial seeds!');
  } catch (error) {
    console.error('‚ùå L·ªói khi ch·∫°y initial seeds:', error);
    throw error;
  }
};

module.exports = { runInitialSeeds };

// N·∫øu ch·∫°y tr·ª±c ti·∫øp file n√†y
if (require.main === module) {
  // K·∫øt n·ªëi ƒë√∫ng t√™n database v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
  mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/task_management')
    .then(() => {
      console.log('üì¶ ƒê√£ k·∫øt n·ªëi MongoDB');
      return runInitialSeeds();
    })
    .then(() => {
      console.log('üéâ Initial seeding completed!');
      process.exit(0);
    })
    .catch(err => {
      console.error('‚ùå L·ªói:', err);
      process.exit(1);
    });
} 