const ProjectRepository = require("../repositories/project.repository");
const UserRepository = require("../repositories/user.repository");
const ProjectUser = require("../../models/project_user.model");
const Task = require("../../models/task.model");
const { PROJECT_STATUS, TASK_STATUS } = require("../../utils/enums");
const ProjectDTO = require("../dto/project.dto");
const { PROJECT_ROLE } = require("../../utils/enums");

/**
 * ProjectService - Qu·∫£n l√Ω nghi·ªáp v·ª• d·ª± √°n
 * 
 * Theo m√¥ h√¨nh Jira/Trello:
 * 1. M·ªói User c√≥ m·ªôt Personal Project ri√™ng (t·ª± ƒë·ªông t·∫°o)
 * 2. Ch·ªâ Admin/Manager m·ªõi c√≥ quy·ªÅn t·∫°o Organization Project
 * 3. User ch·ªâ c√≥ th·ªÉ xem v√† t·∫°o task trong Project m√† h·ªç l√† th√†nh vi√™n
 */
class ProjectService {
	// 1Ô∏è‚É£ T·∫°o Personal Project
	static async createPersonalProject(userId) {
		// Ki·ªÉm tra xem user ƒë√£ c√≥ project c√° nh√¢n ch∆∞a
		const existingProject = await ProjectRepository.findByOwner(userId, true);
		if (existingProject) {
			return existingProject;
		}

		// N·∫øu ch∆∞a c√≥, t·∫°o project m·ªõi
		const startDate = new Date();
		const endDate = new Date(startDate.getFullYear(), 11, 31, 23, 59, 59);

		const newProject = await ProjectRepository.create({
			name: "Personal Tasks",
			description: "Your personal task list",
			ownerId: userId,
			isPersonal: true,
			status: PROJECT_STATUS.IN_PROGRESS,
			startDate: startDate,
			endDate: endDate,
		});

		return newProject;
	}

	// 1Ô∏è‚É£.1Ô∏è‚É£ H√†m ti·ªán √≠ch - L·∫•y Personal Project (kh√¥ng t·ª± t·∫°o)
	static async getOrCreatePersonalProject(userId) {
		// Only find the personal project, don't create if it doesn't exist
		const existingProject = await ProjectRepository.findByOwner(userId, true);
		return existingProject; // Will return null if not found
	}

	// 2Ô∏è‚É£ T·∫°o Organization Project
	/**
	 * T·∫°o d·ª± √°n cho t·ªï ch·ª©c/nh√≥m (ch·ªâ Manager/Admin)
	 * Tu√¢n theo m√¥ h√¨nh gi·ªëng Jira/Trello, ch·ªâ ng∆∞·ªùi c√≥ quy·ªÅn m·ªõi t·∫°o ƒë∆∞·ª£c project cho nh√≥m
	 */
	static async createOrganizationProject(userId, projectData) {
		const user = await UserRepository.findById(userId);
		if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");

		const project = await ProjectRepository.create({
			...projectData,
			ownerId: userId,
			isPersonal: false,
			status: PROJECT_STATUS.IN_PROGRESS,
		});

		// T·ª± ƒë·ªông th√™m ng∆∞·ªùi t·∫°o v√†o project v·ªõi vai tr√≤ Owner
		await ProjectUser.create({
			projectId: project._id,
			userId: userId,
			role: PROJECT_ROLE.OWNER,
		});

		return project;
	}

	// 3Ô∏è‚É£ C·∫≠p nh·∫≠t th√¥ng tin d·ª± √°n
	static async updateProject(projectId, projectData) {
		const project = await ProjectRepository.update(projectId, projectData);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");
		return new ProjectDTO(project);
	}

	// 4Ô∏è‚É£ X√≥a nhi·ªÅu d·ª± √°n
	static async deleteProjects(projectIds) {
		const tasks = await Task.find({
			projectId: { $in: projectIds },
			status: {
				$in: [TASK_STATUS.IN_PROGRESS, TASK_STATUS.TODO, TASK_STATUS.CANCELED],
			},
		});
		if (tasks.length)
			throw new Error(
				"Kh√¥ng th·ªÉ x√≥a c√°c d·ª± √°n khi c√≤n Task ƒëang th·ª±c hi·ªán, ch·ªù th·ª±c hi·ªán ho·∫∑c ƒë√£ h·ªßy."
			);

		await ProjectRepository.deleteMany(projectIds);
		return { message: `ƒê√£ x√≥a ${projectIds.length} d·ª± √°n kh·ªèi h·ªá th·ªëng.` };
	}

	// 5Ô∏è‚É£ Th√™m th√†nh vi√™n v√†o d·ª± √°n
	static async addMembers(projectId, memberIds, role = PROJECT_ROLE.MEMBER) {
		const project = await ProjectRepository.findById(projectId);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");

		const existingMembers = await ProjectUser.find({
			projectId,
			userId: { $in: memberIds },
		});

		const existingMemberIds = existingMembers.map((m) => m.userId.toString());
		const newMemberIds = memberIds.filter(
			(id) => !existingMemberIds.includes(id.toString())
		);

		if (newMemberIds.length === 0) {
			throw new Error("T·∫•t c·∫£ th√†nh vi√™n ƒë√£ t·ªìn t·∫°i trong d·ª± √°n.");
		}

		const membersToAdd = newMemberIds.map((userId) => ({
			projectId,
			userId,
			role,
		}));

		await ProjectUser.insertMany(membersToAdd);
		return { message: `ƒê√£ th√™m ${newMemberIds.length} th√†nh vi√™n v√†o d·ª± √°n.` };
	}

	// 6Ô∏è‚É£ X√≥a th√†nh vi√™n kh·ªèi d·ª± √°n
	static async removeMembers(projectId, memberIds) {
		const project = await ProjectRepository.findById(projectId);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");

		const existingMembers = await ProjectUser.find({
			projectId,
			userId: { $in: memberIds },
		});

		if (existingMembers.length === 0) {
			throw new Error("Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o ƒë·ªÉ x√≥a.");
		}

		await ProjectUser.deleteMany({
			projectId,
			userId: { $in: memberIds },
		});

		return {
			message: `ƒê√£ x√≥a ${existingMembers.length} th√†nh vi√™n kh·ªèi d·ª± √°n.`,
		};
	}

	// 7Ô∏è‚É£ L·∫•y danh s√°ch d·ª± √°n c·ªßa user
	static async getAllProjects(userId) {
		const projects = await ProjectRepository.findAllByUser(userId);
		return projects;
	}

	// 8Ô∏è‚É£ L·∫•y th√¥ng tin d·ª± √°n theo ID
	static async getProjectById(projectId) {
		const project = await ProjectRepository.findById(projectId);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");
		return new ProjectDTO(project);
	}

	// 9Ô∏è‚É£ L·∫•y danh s√°ch th√†nh vi√™n c·ªßa d·ª± √°n
	static async getProjectMembers(projectId) {
		try {
			console.log("üîç Getting members for project ID:", projectId);
			
			// Verify project exists
			const project = await ProjectRepository.findById(projectId);
			if (!project) {
				throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");
			}
			
			// Get members from project
			const members = project.members || [];
			
			// Format member data
			const formattedMembers = members.map(member => ({
				userId: member.userId?._id,
				fullName: member.userId?.fullName || "Kh√¥ng x√°c ƒë·ªãnh",
				email: member.userId?.email || "Kh√¥ng x√°c ƒë·ªãnh",
				role: member.role
			}));
			
			console.log(`‚úÖ Found ${formattedMembers.length} members for project ID: ${projectId}`);
			return formattedMembers;
		} catch (error) {
			console.error("‚ùå Error getting project members:", error);
			throw error;
		}
	}
}

module.exports = ProjectService;
