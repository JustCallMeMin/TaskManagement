const ProjectRepository = require("../repositories/project.repository");
const UserRepository = require("../repositories/user.repository");
const ProjectUser = require("../../models/project_user.model");
const ProjectInvitation = require("../../models/project_invitation.model");
const Task = require("../../models/task.model");
const { PROJECT_STATUS, TASK_STATUS } = require("../../utils/enums");
const ProjectDTO = require("../dto/project.dto");
const { PROJECT_ROLE } = require("../../utils/enums");

/**
 * ProjectService - Qu·∫£n l√Ω nghi·ªáp v·ª• d·ª± √°n
 * 
 * Theo m√¥ h√¨nh Jira/Trello:
 * 1. M·ªói User c√≥ m·ªôt Personal Project ri√™ng (t·ª± ƒë·ªông t·∫°o)
 * 2. Ch·ªâ Admin/Manager m·ªõi c√≥ quy·ªÅn t·∫°o Organization Project
 * 3. User ch·ªâ c√≥ th·ªÉ xem v√† t·∫°o task trong Project m√† h·ªç l√† th√†nh vi√™n
 */
class ProjectService {
	// T·∫°o Personal Project
	static async createPersonalProject(userId) {
		// Ki·ªÉm tra xem user ƒë√£ c√≥ project c√° nh√¢n ch∆∞a
		const existingProject = await ProjectRepository.findByOwner(userId, true);
		if (existingProject) {
			return existingProject;
		}

		// N·∫øu ch∆∞a c√≥, t·∫°o project m·ªõi
		const startDate = new Date();
		const endDate = new Date(startDate.getFullYear(), 11, 31, 23, 59, 59);

		const newProject = await ProjectRepository.create({
			name: "Personal Tasks",
			description: "Your personal task list",
			ownerId: userId,
			isPersonal: true,
			status: PROJECT_STATUS.IN_PROGRESS,
			startDate: startDate,
			endDate: endDate,
		});

		return newProject;
	}

	// L·∫•y Personal Project (kh√¥ng t·ª± t·∫°o)
	static async getOrCreatePersonalProject(userId) {
		// Only find the personal project, don't create if it doesn't exist
		const existingProject = await ProjectRepository.findByOwner(userId, true);
		return existingProject; // Will return null if not found
	}

	// T·∫°o Organization Project
	/**
	 * T·∫°o d·ª± √°n cho t·ªï ch·ª©c/nh√≥m (ch·ªâ Manager/Admin)
	 * Tu√¢n theo m√¥ h√¨nh gi·ªëng Jira/Trello, ch·ªâ ng∆∞·ªùi c√≥ quy·ªÅn m·ªõi t·∫°o ƒë∆∞·ª£c project cho nh√≥m
	 */
	static async createOrganizationProject(userId, projectData) {
		const user = await UserRepository.findById(userId);
		if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");

		const project = await ProjectRepository.create({
			...projectData,
			ownerId: userId,
			isPersonal: false,
			status: PROJECT_STATUS.IN_PROGRESS,
		});

		// T·ª± ƒë·ªông th√™m ng∆∞·ªùi t·∫°o v√†o project v·ªõi vai tr√≤ Owner
		await ProjectUser.create({
			projectId: project._id,
			userId: userId,
			role: PROJECT_ROLE.OWNER,
		});

		return project;
	}

	// C·∫≠p nh·∫≠t th√¥ng tin d·ª± √°n
	static async updateProject(projectId, projectData) {
		const project = await ProjectRepository.update(projectId, projectData);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");
		return new ProjectDTO(project);
	}

	// X√≥a nhi·ªÅu d·ª± √°n
	static async deleteProjects(projectIds) {
		const tasks = await Task.find({
			projectId: { $in: projectIds },
			status: {
				$in: [TASK_STATUS.IN_PROGRESS, TASK_STATUS.TODO, TASK_STATUS.CANCELED],
			},
		});
		if (tasks.length)
			throw new Error(
				"Kh√¥ng th·ªÉ x√≥a c√°c d·ª± √°n khi c√≤n Task ƒëang th·ª±c hi·ªán, ch·ªù th·ª±c hi·ªán ho·∫∑c ƒë√£ h·ªßy."
			);

		await ProjectRepository.deleteMany(projectIds);
		return { message: `ƒê√£ x√≥a ${projectIds.length} d·ª± √°n kh·ªèi h·ªá th·ªëng.` };
	}

	// G·ª≠i l·ªùi m·ªùi th√†nh vi√™n v√†o d·ª± √°n
	static async addMembers(projectId, memberIds, role = PROJECT_ROLE.MEMBER, invitedBy) {
		const project = await ProjectRepository.findById(projectId);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");

		// Check if invited by is provided, otherwise use project owner
		const inviter = invitedBy || project.ownerId;

		// Check existing members
		const existingMembers = await ProjectUser.find({
			projectId,
			userId: { $in: memberIds },
		});
		const existingMemberIds = existingMembers.map((m) => m.userId.toString());

		// Check ALL existing invitations to handle different cases
		const allExistingInvitations = await ProjectInvitation.find({
			projectId,
			userId: { $in: memberIds },
		});

		// Separate invitations by status for different handling
		const pendingInvitations = allExistingInvitations.filter(inv => inv.status === "PENDING");
		const acceptedInvitations = allExistingInvitations.filter(inv => inv.status === "ACCEPTED");
		const otherInvitations = allExistingInvitations.filter(inv => ["REJECTED", "CANCELLED"].includes(inv.status));

		// Create maps for easier lookups
		const pendingInvitationMap = new Map();
		pendingInvitations.forEach(inv => pendingInvitationMap.set(inv.userId.toString(), inv));

		const acceptedInvitationMap = new Map();
		acceptedInvitations.forEach(inv => acceptedInvitationMap.set(inv.userId.toString(), inv));
		
		// Set for tracking IDs with any kind of invitation
		const existingInvitationUserIds = new Set(
			allExistingInvitations.map(inv => inv.userId.toString())
		);
		
		// Log detailed information for debugging
		console.log(`Project members count: ${existingMemberIds.length}`);
		console.log(`PENDING invitations count: ${pendingInvitations.length}`);
		console.log(`ACCEPTED invitations count: ${acceptedInvitations.length}`);
		console.log(`Other invitations count: ${otherInvitations.length}`);
		
		// 1. Handle members who are already in the project
		const membersToSkip = memberIds.filter(id => existingMemberIds.includes(id.toString()));
		if (membersToSkip.length > 0) {
			console.log(`‚ÑπÔ∏è ${membersToSkip.length} users are already project members`);
		}
		
		// 2. Handle users with pending invitations (nothing to do)
		const pendingUserIds = pendingInvitations.map(inv => inv.userId.toString());
		if (pendingUserIds.length > 0) {
			console.log(`‚ÑπÔ∏è ${pendingUserIds.length} users already have pending invitations`);
		}
		
		// 3. Identify users with accepted invitations that are already members
		// They'll be in both the existingMemberIds and have ACCEPTED invitations
		const acceptedUserIds = acceptedInvitations.map(inv => inv.userId.toString());

		// 4. Filter valid users - ones without pending invitations and not already members
		const validMemberIds = memberIds.filter(
			(id) => !existingMemberIds.includes(id.toString()) && !pendingUserIds.includes(id.toString())
		);

		// 5. Process existing invitations that can be reused (REJECTED or CANCELLED)
		const updatedInvitations = [];
		for (const invitation of otherInvitations) {
			// Only process if user is in our valid list
			if (validMemberIds.includes(invitation.userId.toString())) {
				// Update existing invitation instead of creating new one
				invitation.status = "PENDING";
				invitation.updatedAt = new Date();
				invitation.invitedBy = inviter;
				try {
					const updated = await invitation.save();
					updatedInvitations.push(updated);
					console.log(`Reused invitation for user ${invitation.userId}, changed status from ${invitation.status} to PENDING`);
				} catch (err) {
					console.error(`Error updating existing invitation:`, err);
				}
			}
		}

		// 6. Handle ACCEPTED invitations
		// We may need to re-invite users who previously accepted but are no longer members
		for (const invitation of acceptedInvitations) {
			// Only process if user is in our valid list (not a current member but was invited before)
			if (validMemberIds.includes(invitation.userId.toString())) {
				// User previously accepted but is no longer a member - reset invitation to PENDING
				invitation.status = "PENDING";
				invitation.updatedAt = new Date();
				invitation.invitedBy = inviter;
				try {
					const updated = await invitation.save();
					updatedInvitations.push(updated);
					console.log(`üîî Re-invited previously accepted user ${invitation.userId}`);
				} catch (err) {
					console.error(`‚ùå Error updating ACCEPTED invitation:`, err);
				}
			}
		}

		// 7. Filter out users whose invitations were reused
		const reusedUserIds = updatedInvitations.map(inv => inv.userId.toString());
		// Only create new invitations for users without ANY existing invitations
		const remainingUserIds = validMemberIds.filter(id => 
			!existingInvitationUserIds.has(id.toString())
		);

		const createdInvitations = [];
		// Only create new invitations for remaining users
		if (remainingUserIds.length > 0) {
			const invitationsToCreate = remainingUserIds.map((userId) => ({
				projectId,
				userId,
				invitedBy: inviter,
				role,
				status: "PENDING",
			}));

			try {
				const newInvitations = await ProjectInvitation.insertMany(invitationsToCreate);
				createdInvitations.push(...newInvitations);
			} catch (err) {
				console.error(`‚ùå L·ªói khi g·ª≠i l·ªùi m·ªùi:`, err);
				throw new Error(err.message);
			}
		}

		if (updatedInvitations.length === 0 && createdInvitations.length === 0) {
			throw new Error("T·∫•t c·∫£ th√†nh vi√™n ƒë√£ l√† th√†nh vi√™n ho·∫∑c ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o d·ª± √°n n√†y.");
		}

		// Ph√°t s·ª± ki·ªán WebSocket th√¥ng b√°o l·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c g·ª≠i
		try {
			const { getWebSocketInstance } = require('../../config/websocket');
			const io = getWebSocketInstance();
			if (io) {
				// G·ª≠i th√¥ng b√°o cho c·∫£ ng∆∞·ªùi d√πng c√≥ invitation m·ªõi v√† c·∫≠p nh·∫≠t
				const allInvitedUsers = [
					...remainingUserIds, // Ng∆∞·ªùi d√πng c√≥ invitation m·ªõi
					...reusedUserIds     // Ng∆∞·ªùi d√πng c√≥ invitation ƒë∆∞·ª£c c·∫≠p nh·∫≠t
				];

				allInvitedUsers.forEach(userId => {
					io.to(`user_${userId}`).emit('projectInvitation', {
						projectId: projectId,
						projectName: project.name,
						invitedBy: inviter
					});
				});
				console.log('üîî WebSocket notifications sent for project invitations to:', allInvitedUsers);
			}
		} catch (error) {
			console.error('‚ö†Ô∏è WebSocket notification error:', error);
		}

		// K·∫øt h·ª£p c·∫£ invitation m·ªõi v√† ƒë√£ c·∫≠p nh·∫≠t ƒë·ªÉ tr·∫£ v·ªÅ
		const allInvitations = [...createdInvitations, ...updatedInvitations];
		const totalInvitations = allInvitations.length;

		return { 
			message: `ƒê√£ g·ª≠i l·ªùi m·ªùi ƒë·∫øn ${totalInvitations} ng∆∞·ªùi d√πng.`,
			invitations: allInvitations
		};
	}

	// Ch·∫•p nh·∫≠n l·ªùi m·ªùi d·ª± √°n
	static async acceptInvitation(invitationId, userId) {
		console.log(`[CRITICAL LOG] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ch·∫•p nh·∫≠n l·ªùi m·ªùi: ${invitationId} cho user: ${userId}`);
		try {
			console.log(`[CRITICAL] Ch·∫•p nh·∫≠n l·ªùi m·ªùi: ${invitationId} cho user: ${userId}`);
			console.log(`InvitationID type: ${typeof invitationId}`);
			console.log(`UserID type: ${typeof userId}`);
			
			if (!invitationId || typeof invitationId !== 'string') {
				console.error(`Invalid invitation ID format: ${invitationId}`);
				throw new Error("ID l·ªùi m·ªùi kh√¥ng h·ª£p l·ªá.");
			}
			
			const { isValidObjectId } = require('mongoose');
			if (!isValidObjectId(invitationId)) {
				console.error(`Not a valid MongoDB ObjectID: ${invitationId}`);
				throw new Error("ID l·ªùi m·ªùi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng MongoDB.");
			}
			
			const invitation = await ProjectInvitation.findById(invitationId).exec();
			if (!invitation) {
				console.error(`Invitation not found with ID: ${invitationId}`);
				throw new Error("L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i.");
			}
			
			console.log(`Found invitation status: ${invitation.status} for project: ${invitation.projectId}`);
			console.log(`Full invitation object:`, JSON.stringify(invitation, null, 2));
			
			if (invitation.userId.toString() !== userId.toString()) {
				console.error(`User ${userId} attempted to accept invitation for user ${invitation.userId}`);
				throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·∫•p nh·∫≠n l·ªùi m·ªùi n√†y.");
			}
			
			if (invitation.status !== "PENDING") {
				console.warn(`Invitation ${invitationId} is already ${invitation.status}`);
				throw new Error(`L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c ${invitation.status === "ACCEPTED" ? "ch·∫•p nh·∫≠n" : "t·ª´ ch·ªëi"} tr∆∞·ªõc ƒë√≥.`);
			}
		
			try {
				const projectUser = await ProjectUser.create({
					projectId: invitation.projectId,
					userId: invitation.userId,
					role: invitation.role,
				});
				console.log(`User ${userId} added to project ${invitation.projectId} with role ${invitation.role}`);
			} catch (err) {
				if (err.code !== 11000) {
					console.error(`Failed to add user to project:`, err);
					throw new Error("Kh√¥ng th·ªÉ th√™m th√†nh vi√™n v√†o d·ª± √°n. Vui l√≤ng th·ª≠ l·∫°i.");
				} else {
					console.log(`User ${userId} already exists in project ${invitation.projectId} - continuing`);
				}
			}
		
		console.log(`[IMPORTANT] ƒêang c·∫≠p nh·∫≠t status l·ªùi m·ªùi ${invitationId} th√†nh ACCEPTED`);
		
		invitation.status = "ACCEPTED";
		invitation.updatedAt = new Date();
		try {
			await invitation.save();
			console.log(`Ph∆∞∆°ng ph√°p 1 - C·∫≠p nh·∫≠t document th√†nh c√¥ng`);
		} catch (saveErr) {
			console.error(`Ph∆∞∆°ng ph√°p 1 th·∫•t b·∫°i:`, saveErr);
		}
		
		try {
			const updateResult = await ProjectInvitation.updateOne(
				{ _id: invitationId },
				{ $set: { status: "ACCEPTED", updatedAt: new Date() } }
			);
			console.log(`Ph∆∞∆°ng ph√°p 2 - K·∫øt qu·∫£ c·∫≠p nh·∫≠t:`, updateResult);

			if (updateResult.matchedCount === 0) {
				console.error(`Kh√¥ng t√¨m th·∫•y invitation ƒë·ªÉ c·∫≠p nh·∫≠t v·ªõi id ${invitationId}`);
			}

			if (updateResult.modifiedCount === 0) {
				console.warn(`Kh√¥ng c√≥ document n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi id ${invitationId}`);
			}
		} catch (updateErr) {
			console.error(`Ph∆∞∆°ng ph√°p 2 th·∫•t b·∫°i:`, updateErr);
		}

		try {
			const verifyInvitation = await ProjectInvitation.findById(invitationId);
			console.log(`üîç Ph∆∞∆°ng ph√°p 3 - Ki·ªÉm tra sau c·∫≠p nh·∫≠t: status = ${verifyInvitation?.status}`);
		} catch (verifyErr) {
			console.error(`Ph∆∞∆°ng ph√°p 3 th·∫•t b·∫°i:`, verifyErr);
		}
		
		// Get project details for notification
		const project = await ProjectRepository.findById(invitation.projectId);
		if (!project) {
			console.error(`Project not found with ID: ${invitation.projectId}`);
			throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
		}
		
		// Send WebSocket notification
		try {
			const { getWebSocketInstance } = require('../../config/websocket');
			const io = getWebSocketInstance();
			if (io) {
				// Notify both project owner AND the accepting user
				io.to(`user_${project.ownerId}`).emit('invitationAccepted', {
					projectId: invitation.projectId,
					projectName: project.name,
					userId: invitation.userId
				});
				
				// Also notify the user who accepted
				io.to(`user_${userId}`).emit('projectMembershipChanged', {
					projectId: invitation.projectId,
					projectName: project.name,
					action: 'added'
				});
				
				console.log('WebSocket notifications sent for accepted invitation');
			}
		} catch (error) {
			console.error('WebSocket notification error:', error);
		}

		return { 
			message: "B·∫°n ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi tham gia d·ª± √°n.",
			project: new ProjectDTO(project)
		};
		} catch (error) {
			console.error(`[ERROR] L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi:`, error);
			throw error;
		}
	}

	// T·ª´ ch·ªëi l·ªùi m·ªùi d·ª± √°n
	static async rejectInvitation(invitationId, userId) {
		const invitation = await ProjectInvitation.findById(invitationId);
		if (!invitation) throw new Error("L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i.");
		
		// Verify this invitation belongs to this user
		if (invitation.userId.toString() !== userId.toString()) {
			throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi l·ªùi m·ªùi n√†y.");
		}
		
		if (invitation.status !== "PENDING") {
			throw new Error(`L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c ${invitation.status === "ACCEPTED" ? "ch·∫•p nh·∫≠n" : "t·ª´ ch·ªëi"} tr∆∞·ªõc ƒë√≥.`);
		}
		
		// Update invitation status
		invitation.status = "REJECTED";
		invitation.updatedAt = new Date();
		await invitation.save();
		
		// Get project details for notification
		const project = await ProjectRepository.findById(invitation.projectId);
		
		// Send WebSocket notification
		try {
			const { getWebSocketInstance } = require('../../config/websocket');
			const io = getWebSocketInstance();
			if (io) {
				// Notify project owner
				io.to(`user_${project.ownerId}`).emit('invitationRejected', {
					projectId: invitation.projectId,
					projectName: project.name,
					userId: invitation.userId
				});
				console.log('WebSocket notification sent for rejected invitation');
			}
		} catch (error) {
			console.error('WebSocket notification error:', error);
		}

		return { message: "B·∫°n ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi tham gia d·ª± √°n." };
	}

	//  L·∫•y danh s√°ch l·ªùi m·ªùi c·ªßa ng∆∞·ªùi d√πng
	static async getUserInvitations(userId) {
		const invitations = await ProjectInvitation.find({
			userId,
			status: "PENDING"
		}).populate({
			path: 'projectId',
			select: 'name description'
		}).populate({
			path: 'invitedBy',
			select: 'fullName email'
		});
		
		return invitations;
	}

	// X√≥a th√†nh vi√™n kh·ªèi d·ª± √°n
	static async removeMembers(projectId, memberIds) {
		const project = await ProjectRepository.findById(projectId);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");

		const existingMembers = await ProjectUser.find({
			projectId,
			userId: { $in: memberIds },
		});

		if (existingMembers.length === 0) {
			throw new Error("Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o ƒë·ªÉ x√≥a.");
		}

		await ProjectUser.deleteMany({
			projectId,
			userId: { $in: memberIds },
		});

		return {
			message: `ƒê√£ x√≥a ${existingMembers.length} th√†nh vi√™n kh·ªèi d·ª± √°n.`,
		};
	}

	// L·∫•y danh s√°ch d·ª± √°n c·ªßa user
	static async getAllProjects(userId) {
		const projects = await ProjectRepository.findAllByUser(userId);
		return projects;
	}

	// L·∫•y th√¥ng tin d·ª± √°n theo ID
	static async getProjectById(projectId) {
		const project = await ProjectRepository.findById(projectId);
		if (!project) throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");
		return new ProjectDTO(project);
	}

	// L·∫•y danh s√°ch th√†nh vi√™n c·ªßa d·ª± √°n
	static async getProjectMembers(projectId) {
		try {
			console.log("üîç Getting members for project ID:", projectId);
			
			// Verify project exists
			const project = await ProjectRepository.findById(projectId);
			if (!project) {
				throw new Error("D·ª± √°n kh√¥ng t·ªìn t·∫°i.");
			}
			
			// Get members from project
			const members = project.members || [];
			
			// Format member data
			const formattedMembers = members.map(member => ({
				userId: member.userId?._id,
				fullName: member.userId?.fullName || "Kh√¥ng x√°c ƒë·ªãnh",
				email: member.userId?.email || "Kh√¥ng x√°c ƒë·ªãnh",
				role: member.role
			}));
			
			console.log(`Found ${formattedMembers.length} members for project ID: ${projectId}`);
			return formattedMembers;
		} catch (error) {
			console.error("Error getting project members:", error);
			throw error;
		}
	}
}

module.exports = ProjectService;
