const ProjectService = require("../domain/services/project.service");
const { successResponse, errorResponse, formatProjectsResponse, formatProjectResponse } = require("../utils/response");

class ProjectController {
    // 1Ô∏è‚É£ T·∫°o Organization Project
    static async createOrganizationProject(req, res) {
        try {
            if (!req.body?.name) {
                return errorResponse(res, "T√™n d·ª± √°n l√† b·∫Øt bu·ªôc.", 400);
            }
            const project = await ProjectService.createOrganizationProject(req.user.id, req.body);
            return successResponse(res, project, "D·ª± √°n t·ªï ch·ª©c ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o d·ª± √°n t·ªï ch·ª©c:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }

    // 2Ô∏è‚É£ G·ª≠i l·ªùi m·ªùi th√†nh vi√™n v√†o d·ª± √°n
    static async addMembers(req, res) {
        try {
            const { projectId } = req.params;
            const { members } = req.body;
            if (!Array.isArray(members) || members.length === 0) {
                return errorResponse(res, "Danh s√°ch th√†nh vi√™n kh√¥ng h·ª£p l·ªá.", 400);
            }
            const result = await ProjectService.addMembers(projectId, members, undefined, req.user.id);
            return successResponse(res, result, "L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn c√°c th√†nh vi√™n.");
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i l·ªùi m·ªùi:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }
    
    // 2Ô∏è‚É£.1Ô∏è‚É£ L·∫•y danh s√°ch l·ªùi m·ªùi d·ª± √°n c·ªßa ng∆∞·ªùi d√πng
    static async getUserInvitations(req, res) {
        try {
            const invitations = await ProjectService.getUserInvitations(req.user.id);
            return successResponse(res, invitations, "Danh s√°ch l·ªùi m·ªùi d·ª± √°n.");
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch l·ªùi m·ªùi:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }
    
    // 2Ô∏è‚É£.2Ô∏è‚É£ Ch·∫•p nh·∫≠n l·ªùi m·ªùi d·ª± √°n
    static async acceptInvitation(req, res) {
        try {
            const { invitationId } = req.params;
            const result = await ProjectService.acceptInvitation(invitationId, req.user.id);
            return successResponse(res, result, "L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n.");
        } catch (error) {
            console.error("‚ùå L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }
    
    // 2Ô∏è‚É£.3Ô∏è‚É£ T·ª´ ch·ªëi l·ªùi m·ªùi d·ª± √°n
    static async rejectInvitation(req, res) {
        try {
            const { invitationId } = req.params;
            const result = await ProjectService.rejectInvitation(invitationId, req.user.id);
            return successResponse(res, result, "L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c t·ª´ ch·ªëi.");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·ª´ ch·ªëi l·ªùi m·ªùi:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }

    // 3Ô∏è‚É£ X√≥a th√†nh vi√™n kh·ªèi d·ª± √°n
    static async removeMembers(req, res) {
        try {
            const { projectId } = req.params;
            const { userIds } = req.body;
            if (!Array.isArray(userIds) || userIds.length === 0) {
                return errorResponse(res, "Danh s√°ch userIds kh√¥ng h·ª£p l·ªá.", 400);
            }
            const result = await ProjectService.removeMembers(projectId, userIds);
            return successResponse(res, result, "Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi d·ª± √°n.");
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a th√†nh vi√™n:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }

    // 4Ô∏è‚É£ C·∫≠p nh·∫≠t th√¥ng tin d·ª± √°n
    static async updateProject(req, res) {
        try {
            const { projectId } = req.params;
            const project = await ProjectService.updateProject(projectId, req.body);
            return successResponse(res, project, "D·ª± √°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ª± √°n:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }

    // 5Ô∏è‚É£ X√≥a nhi·ªÅu d·ª± √°n
    static async deleteProjects(req, res) {
        try {
            // L·∫•y projectIds t·ª´ body ho·∫∑c query parameters
            let projectIds;
            const userId = req.user.id;
            const hasDeleteProjectPermission = req.user.permissions?.includes("Delete Project");
            
            console.log("üîê Ki·ªÉm tra quy·ªÅn:", {
                userId,
                permissions: req.user.permissions,
                hasDeleteProjectPermission
            });
            
            if (req.body && req.body.projectIds) {
                // N·∫øu c√≥ trong body
                projectIds = req.body.projectIds;
            } else if (req.query && req.query.ids) {
                // N·∫øu c√≥ trong query (ids=123)
                const ids = req.query.ids;
                projectIds = Array.isArray(ids) ? ids : [ids];
            } else {
                // Tr∆∞·ªùng h·ª£p x√≥a m·ªôt d·ª± √°n c·ª• th·ªÉ (/projects/:projectId)
                const projectId = req.params.projectId;
                if (projectId) {
                    projectIds = [projectId];
                }
            }

            if (!projectIds || (Array.isArray(projectIds) && projectIds.length === 0)) {
                return errorResponse(res, "Danh s√°ch projectIds kh√¥ng h·ª£p l·ªá.", 400);
            }
            
            // Ki·ªÉm tra quy·ªÅn x√≥a d·ª± √°n
            // N·∫øu kh√¥ng c√≥ quy·ªÅn "Delete Project", ch·ªâ cho ph√©p x√≥a project c√° nh√¢n
            console.log('üîç Ti·∫øn h√†nh ki·ªÉm tra quy·ªÅn x√≥a project:', { hasDeleteProjectPermission, projectIds });
            
            if (!hasDeleteProjectPermission) {
                // Ki·ªÉm tra t·ª´ng project c√≥ ph·∫£i project c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng kh√¥ng
                const projectsToCheck = [];
                
                for (const projectId of projectIds) {
                    console.log(`üîç ƒêang t√¨m project v·ªõi ID: ${projectId}`);
                    const project = await ProjectService.getProjectById(projectId);
                    
                    if (!project) {
                        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y project v·ªõi ID: ${projectId}`);
                        return errorResponse(res, `D·ª± √°n v·ªõi ID ${projectId} kh√¥ng t·ªìn t·∫°i.`, 404);
                    }
                    
                    console.log(`üîç ƒê√£ t√¨m th·∫•y project:`, {
                        _id: project._id,
                        name: project.name,
                        isPersonal: project.isPersonal,
                        createdBy: project.createdBy,
                        userId
                    });
                    
                    // X√°c ƒë·ªãnh c√≥ ph·∫£i project c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng kh√¥ng
                    // ProjectDTO tr·∫£ v·ªÅ owner.userId thay v√¨ ownerId
                    // Do ProjectService.getProjectById() tr·∫£ v·ªÅ ProjectDTO
                    const ownerId = project.owner?.userId;
                    const isPersonalProject = project.isPersonal && 
                        String(ownerId) === String(userId);
                    
                    console.log(`üí° Ki·ªÉm tra project ${projectId}:`, {
                        isPersonal: project.isPersonal,
                        owner: project.owner,
                        ownerId: ownerId ? String(ownerId) : 'undefined',
                        userId: String(userId),
                        isOwnedByUser: ownerId ? String(ownerId) === String(userId) : false,
                        isPersonalProject
                    });
                    
                    if (!isPersonalProject) {
                        console.log(`‚ùå Project kh√¥ng ph·∫£i l√† c√° nh√¢n ho·∫∑c kh√¥ng thu·ªôc v·ªÅ ng∆∞·ªùi d√πng ${userId}`);
                        return errorResponse(res, "B·∫°n ch·ªâ c√≥ quy·ªÅn x√≥a d·ª± √°n c√° nh√¢n c·ªßa m√¨nh.", 403);
                    }
                    
                    console.log(`‚úÖ X√°c nh·∫≠n project ${projectId} l√† c·ªßa ng∆∞·ªùi d√πng v√† c√≥ th·ªÉ x√≥a`);
                    projectsToCheck.push(projectId);
                }
                
                // C·∫≠p nh·∫≠t danh s√°ch projectIds ch·ªâ bao g·ªìm c√°c d·ª± √°n c√° nh√¢n
                projectIds = projectsToCheck;
            }
            
            console.log("üí•Ô∏è X√≥a d·ª± √°n v·ªõi IDs:", projectIds);
            try {
                const result = await ProjectService.deleteProjects(projectIds);
                return successResponse(res, result, "D·ª± √°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
            } catch (deleteError) {
                console.error("‚ùå L·ªói c·ª• th·ªÉ khi x√≥a d·ª± √°n:", deleteError);
                
                // X·ª≠ l√Ω c√°c lo·∫°i l·ªói ri√™ng bi·ªát v·ªõi th√¥ng b√°o th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng
                if (deleteError.message.includes("Task ƒëang th·ª±c hi·ªán") || deleteError.message.includes("ch·ªù th·ª±c hi·ªán")) {
                    return errorResponse(
                        res, 
                        "Kh√¥ng th·ªÉ x√≥a d·ª± √°n v√¨ c√≤n c√¥ng vi·ªác ch∆∞a ho√†n th√†nh. Vui l√≤ng ho√†n th√†nh ho·∫∑c x√≥a c√°c c√¥ng vi·ªác tr∆∞·ªõc khi x√≥a d·ª± √°n.", 
                        400
                    );
                }
                
                return errorResponse(res, deleteError.message, deleteError.status || 400);
            }
        } catch (error) {
            console.error("‚ùå L·ªói t·ªïng qu√°t khi x√≥a d·ª± √°n:", error);
            return errorResponse(res, "C√≥ l·ªói x·∫£y ra khi x√≥a d·ª± √°n. Vui l√≤ng th·ª≠ l·∫°i sau.", error.status || 500);
        }
    }

    // 6Ô∏è‚É£ L·∫•y danh s√°ch d·ª± √°n c·ªßa User
    static async getAllProjects(req, res) {
        try {
            // Set cache control headers
            res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
            res.set('Pragma', 'no-cache');
            res.set('Expires', '0');

            // Check if the user has a personal project (don't create one)
            const personalProject = await ProjectService.getOrCreatePersonalProject(req.user.id);
            console.log("üîç Personal project:", personalProject || "Not found");
            
            // Get all projects for the user
            const projects = await ProjectService.getAllProjects(req.user.id);
            console.log("üîç All projects count:", projects.length);
            
            // Log if personal project is in the list
            const personalProjectInList = projects.some(p => p.isPersonal === true);
            console.log("üîç Personal project in list:", personalProjectInList);
            
            // Log raw projects for debugging
            console.log("üîç Raw projects:", projects.map(p => ({
                id: p._id, 
                isPersonal: p.isPersonal,
                name: p.name,
                status: p.status
            })));
            
            // Format and send response
            const formattedProjects = formatProjectsResponse(projects);
            console.log("üîç Formatted projects count:", formattedProjects.length);
            console.log("üîç Formatted projects:", formattedProjects);
            
            return successResponse(res, formattedProjects, "Danh s√°ch d·ª± √°n c·ªßa b·∫°n.");
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch d·ª± √°n:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }

    // 7Ô∏è‚É£ L·∫•y th√¥ng tin d·ª± √°n theo ID
    static async getProjectById(req, res) {
        try {
            // Set cache control headers
            res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
            res.set('Pragma', 'no-cache');
            res.set('Expires', '0');
            
            const { projectId } = req.params;
            
            if (!projectId) {
                return errorResponse(res, "Project ID is required", 400);
            }
            
            console.log("üîç Getting project by ID:", projectId);
            
            const project = await ProjectService.getProjectById(projectId);
            if (!project) {
                return errorResponse(res, "D·ª± √°n kh√¥ng t·ªìn t·∫°i.", 404);
            }
            
            const formattedProject = formatProjectResponse(project);
            console.log("üîç Formatted project:", formattedProject);
            
            return successResponse(res, formattedProject, "L·∫•y th√¥ng tin d·ª± √°n th√†nh c√¥ng.");
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin d·ª± √°n:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }

    // 8Ô∏è‚É£ L·∫•y danh s√°ch th√†nh vi√™n c·ªßa d·ª± √°n
    static async getProjectMembers(req, res) {
        try {
            // Set cache control headers
            res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
            res.set('Pragma', 'no-cache');
            res.set('Expires', '0');
            
            const { projectId } = req.params;
            
            if (!projectId) {
                return errorResponse(res, "Project ID is required", 400);
            }
            
            console.log("üîç Getting members for project ID:", projectId);
            
            const members = await ProjectService.getProjectMembers(projectId);
            
            console.log("üîç Found members:", members.length);
            
            return successResponse(res, members, "Danh s√°ch th√†nh vi√™n d·ª± √°n.");
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n:", error);
            return errorResponse(res, error.message, error.status || 400);
        }
    }
}

module.exports = ProjectController;